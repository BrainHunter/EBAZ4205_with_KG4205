// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Zynq_proc_v_frmbuf_rd_0_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        StrmMPix_V_val_0_V_dout,
        StrmMPix_V_val_0_V_empty_n,
        StrmMPix_V_val_0_V_read,
        StrmMPix_V_val_1_V_dout,
        StrmMPix_V_val_1_V_empty_n,
        StrmMPix_V_val_1_V_read,
        StrmMPix_V_val_2_V_dout,
        StrmMPix_V_val_2_V_empty_n,
        StrmMPix_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height,
        HwReg_width,
        trunc_ln139_loc_dout,
        trunc_ln139_loc_empty_n,
        trunc_ln139_loc_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] StrmMPix_V_val_0_V_dout;
input   StrmMPix_V_val_0_V_empty_n;
output   StrmMPix_V_val_0_V_read;
input  [7:0] StrmMPix_V_val_1_V_dout;
input   StrmMPix_V_val_1_V_empty_n;
output   StrmMPix_V_val_1_V_read;
input  [7:0] StrmMPix_V_val_2_V_dout;
input   StrmMPix_V_val_2_V_empty_n;
output   StrmMPix_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [10:0] Height;
input  [15:0] HwReg_width;
input  [2:0] trunc_ln139_loc_dout;
input   trunc_ln139_loc_empty_n;
output   trunc_ln139_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg StrmMPix_V_val_0_V_read;
reg StrmMPix_V_val_1_V_read;
reg StrmMPix_V_val_2_V_read;
reg trunc_ln139_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] mapComp_address0;
reg    mapComp_ce0;
wire   [1:0] mapComp_q0;
reg    StrmMPix_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln221_reg_579;
reg    StrmMPix_V_val_1_V_blk_n;
reg    StrmMPix_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln221_reg_579_pp0_iter1_reg;
reg    trunc_ln139_loc_blk_n;
wire    ap_CS_fsm_state2;
reg   [10:0] j_0_i_i_reg_261;
reg    ap_block_state1;
wire   [10:0] grp_reg_unsigned_short_s_fu_276_ap_return;
reg   [10:0] tmp_i_i_reg_510;
wire    grp_reg_unsigned_short_s_fu_276_ap_ready;
wire    grp_reg_unsigned_short_s_fu_276_ap_done;
wire    grp_reg_unsigned_short_s_fu_282_ap_ready;
wire    grp_reg_unsigned_short_s_fu_282_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [10:0] grp_reg_unsigned_short_s_fu_282_ap_return;
reg   [10:0] tmp_1_i_i_reg_515;
wire   [11:0] zext_ln172_fu_288_p1;
reg   [11:0] zext_ln172_reg_520;
wire   [4:0] sub_ln321_fu_304_p2;
reg   [4:0] sub_ln321_reg_525;
wire   [1:0] i_fu_316_p2;
reg   [1:0] i_reg_533;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln213_fu_310_p2;
wire   [11:0] add_ln234_fu_345_p2;
reg   [11:0] add_ln234_reg_550;
wire   [1:0] trunc_ln215_fu_350_p1;
reg   [1:0] trunc_ln215_reg_555;
wire   [1:0] trunc_ln215_1_fu_354_p1;
reg   [1:0] trunc_ln215_1_reg_560;
wire   [1:0] trunc_ln215_2_fu_358_p1;
reg   [1:0] trunc_ln215_2_reg_565;
wire   [0:0] icmp_ln219_fu_386_p2;
wire    ap_CS_fsm_state5;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [10:0] i_1_fu_391_p2;
reg   [10:0] i_1_reg_574;
wire   [0:0] icmp_ln221_fu_401_p2;
wire    ap_block_state6_pp0_stage0_iter0;
wire    io_acc_block_signal_op83;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_406_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_412_p2;
reg   [0:0] tmp_last_V_reg_588;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire    grp_reg_unsigned_short_s_fu_276_ap_start;
wire    grp_reg_unsigned_short_s_fu_276_ap_idle;
wire    grp_reg_unsigned_short_s_fu_282_ap_start;
wire    grp_reg_unsigned_short_s_fu_282_ap_idle;
wire   [10:0] grp_reg_unsigned_short_s_fu_282_in_r;
reg   [1:0] i_0_i_i_reg_238;
wire    ap_CS_fsm_state4;
reg   [10:0] i1_0_i_i_reg_250;
wire    ap_CS_fsm_state9;
reg    grp_reg_unsigned_short_s_fu_276_ap_start_reg;
reg    ap_block_state1_ignore_call19;
reg    grp_reg_unsigned_short_s_fu_282_ap_start_reg;
reg    ap_block_state1_ignore_call20;
wire  signed [63:0] sext_ln321_fu_331_p1;
reg   [4:0] map_V_0_03_i_i_fu_152;
wire   [4:0] zext_ln321_2_fu_367_p1;
reg   [4:0] map_V_1_04_i_i_fu_156;
reg   [4:0] map_V_2_05_i_i_fu_160;
reg   [0:0] tmp_user_V_fu_164;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] tmp_3_fu_296_p3;
wire   [4:0] zext_ln321_fu_292_p1;
wire   [4:0] zext_ln321_1_fu_322_p1;
wire   [4:0] add_ln321_fu_326_p2;
wire   [11:0] zext_ln221_fu_397_p1;
wire   [7:0] tmp_2_fu_455_p5;
wire   [7:0] tmp_1_fu_444_p5;
wire   [7:0] tmp_fu_433_p5;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [23:0] m_axis_video_TDATA_int;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_AXI_video_strm_V_data_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_276_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_282_ap_start_reg = 1'b0;
end

Zynq_proc_v_frmbuf_rd_0_0_MultiPixStream2AXfYi #(
    .DataWidth( 2 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

Zynq_proc_v_frmbuf_rd_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_276(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_276_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_276_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_276_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_276_ap_ready),
    .in_r(Height),
    .ap_return(grp_reg_unsigned_short_s_fu_276_ap_return)
);

Zynq_proc_v_frmbuf_rd_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_282(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_282_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_282_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_282_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_282_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_282_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_282_ap_return)
);

Zynq_proc_v_frmbuf_rd_0_0_v_frmbuf_rd_mux_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_3g8j_U31(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(trunc_ln215_reg_555),
    .dout(tmp_fu_433_p5)
);

Zynq_proc_v_frmbuf_rd_0_0_v_frmbuf_rd_mux_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_3g8j_U32(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(trunc_ln215_1_reg_560),
    .dout(tmp_1_fu_444_p5)
);

Zynq_proc_v_frmbuf_rd_0_0_v_frmbuf_rd_mux_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
v_frmbuf_rd_mux_3g8j_U33(
    .din0(StrmMPix_V_val_0_V_dout),
    .din1(StrmMPix_V_val_1_V_dout),
    .din2(StrmMPix_V_val_2_V_dout),
    .din3(trunc_ln215_2_reg_565),
    .dout(tmp_2_fu_455_p5)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_video_TDATA_int),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_AXI_video_strm_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd7),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(3'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_user_V_fu_164),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_last_V_reg_588),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln219_fu_386_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln219_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln219_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_276_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_276_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_276_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_276_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_282_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_282_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_282_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_282_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i1_0_i_i_reg_250 <= i_1_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln213_fu_310_p2 == 1'd1))) begin
        i1_0_i_i_reg_250 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_i_reg_238 <= i_reg_533;
    end else if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_i_reg_238 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln219_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        j_0_i_i_reg_261 <= 11'd0;
    end else if (((icmp_ln221_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_i_reg_261 <= j_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_164 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln213_fu_310_p2 == 1'd1))) begin
        tmp_user_V_fu_164 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln213_fu_310_p2 == 1'd1))) begin
        add_ln234_reg_550 <= add_ln234_fu_345_p2;
        trunc_ln215_1_reg_560 <= trunc_ln215_1_fu_354_p1;
        trunc_ln215_2_reg_565 <= trunc_ln215_2_fu_358_p1;
        trunc_ln215_reg_555 <= trunc_ln215_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        i_1_reg_574 <= i_1_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_533 <= i_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln221_reg_579 <= icmp_ln221_fu_401_p2;
        icmp_ln221_reg_579_pp0_iter1_reg <= icmp_ln221_reg_579;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_238 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_0_03_i_i_fu_152[1 : 0] <= zext_ln321_2_fu_367_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_i_i_reg_238 == 2'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_1_04_i_i_fu_156[1 : 0] <= zext_ln321_2_fu_367_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_0_i_i_reg_238 == 2'd1) & ~(i_0_i_i_reg_238 == 2'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        map_V_2_05_i_i_fu_160[1 : 0] <= zext_ln321_2_fu_367_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln321_reg_525 <= sub_ln321_fu_304_p2;
        tmp_1_i_i_reg_515 <= grp_reg_unsigned_short_s_fu_282_ap_return;
        tmp_i_i_reg_510 <= grp_reg_unsigned_short_s_fu_276_ap_return;
        zext_ln172_reg_520[10 : 0] <= zext_ln172_fu_288_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln221_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_588 <= tmp_last_V_fu_412_p2;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_0_V_blk_n = StrmMPix_V_val_0_V_empty_n;
    end else begin
        StrmMPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        StrmMPix_V_val_0_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_1_V_blk_n = StrmMPix_V_val_1_V_empty_n;
    end else begin
        StrmMPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        StrmMPix_V_val_1_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        StrmMPix_V_val_2_V_blk_n = StrmMPix_V_val_2_V_empty_n;
    end else begin
        StrmMPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        StrmMPix_V_val_2_V_read = 1'b1;
    end else begin
        StrmMPix_V_val_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln221_fu_401_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln219_fu_386_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln219_fu_386_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln221_reg_579_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln221_reg_579 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln221_reg_579 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln139_loc_blk_n = trunc_ln139_loc_empty_n;
    end else begin
        trunc_ln139_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln139_loc_read = 1'b1;
    end else begin
        trunc_ln139_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((trunc_ln139_loc_empty_n == 1'b0) | (1'b1 == ap_block_state2_on_subcall_done)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln213_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln219_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln219_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_401_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln221_fu_401_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln234_fu_345_p2 = ($signed(12'd4095) + $signed(zext_ln172_reg_520));

assign add_ln321_fu_326_p2 = (sub_ln321_reg_525 + zext_ln321_1_fu_322_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln221_reg_579 == 1'd0) & (io_acc_block_signal_op83 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln221_reg_579 == 1'd0) & (io_acc_block_signal_op83 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln221_reg_579 == 1'd0) & (io_acc_block_signal_op83 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call19 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call20 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_282_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_276_ap_done == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln221_reg_579 == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((icmp_ln221_reg_579 == 1'd0) & (io_acc_block_signal_op83 == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((icmp_ln221_reg_579_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_reg_unsigned_short_s_fu_276_ap_start = grp_reg_unsigned_short_s_fu_276_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_282_ap_start = grp_reg_unsigned_short_s_fu_282_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_282_in_r = HwReg_width[10:0];

assign i_1_fu_391_p2 = (i1_0_i_i_reg_250 + 11'd1);

assign i_fu_316_p2 = (i_0_i_i_reg_238 + 2'd1);

assign icmp_ln213_fu_310_p2 = ((i_0_i_i_reg_238 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_386_p2 = ((i1_0_i_i_reg_250 == tmp_i_i_reg_510) ? 1'b1 : 1'b0);

assign icmp_ln221_fu_401_p2 = ((j_0_i_i_reg_261 == tmp_1_i_i_reg_515) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op83 = (StrmMPix_V_val_2_V_empty_n & StrmMPix_V_val_1_V_empty_n & StrmMPix_V_val_0_V_empty_n);

assign j_fu_406_p2 = (j_0_i_i_reg_261 + 11'd1);

assign m_axis_video_TDATA_int = {{{tmp_2_fu_455_p5}, {tmp_1_fu_444_p5}}, {tmp_fu_433_p5}};

assign m_axis_video_TVALID = regslice_both_AXI_video_strm_V_data_V_U_vld_out;

assign mapComp_address0 = sext_ln321_fu_331_p1;

assign sext_ln321_fu_331_p1 = $signed(add_ln321_fu_326_p2);

assign sub_ln321_fu_304_p2 = (tmp_3_fu_296_p3 - zext_ln321_fu_292_p1);

assign tmp_3_fu_296_p3 = {{trunc_ln139_loc_dout}, {2'd0}};

assign tmp_last_V_fu_412_p2 = ((zext_ln221_fu_397_p1 == add_ln234_reg_550) ? 1'b1 : 1'b0);

assign trunc_ln215_1_fu_354_p1 = map_V_1_04_i_i_fu_156[1:0];

assign trunc_ln215_2_fu_358_p1 = map_V_2_05_i_i_fu_160[1:0];

assign trunc_ln215_fu_350_p1 = map_V_0_03_i_i_fu_152[1:0];

assign zext_ln172_fu_288_p1 = grp_reg_unsigned_short_s_fu_282_ap_return;

assign zext_ln221_fu_397_p1 = j_0_i_i_reg_261;

assign zext_ln321_1_fu_322_p1 = i_0_i_i_reg_238;

assign zext_ln321_2_fu_367_p1 = mapComp_q0;

assign zext_ln321_fu_292_p1 = trunc_ln139_loc_dout;

always @ (posedge ap_clk) begin
    zext_ln172_reg_520[11] <= 1'b0;
    map_V_0_03_i_i_fu_152[4:2] <= 3'b000;
    map_V_1_04_i_i_fu_156[4:2] <= 3'b000;
    map_V_2_05_i_i_fu_160[4:2] <= 3'b000;
end

endmodule //Zynq_proc_v_frmbuf_rd_0_0_MultiPixStream2AXIvi
